// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace DiazDTRPG
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    using QFramework;
    using UniRx;
    
    public class UIInventoryItemPanelData : QFramework.UIPanelData
    {
        public UISolt Solt;
        public Item item;
        public int Amount;
    }
    
    public partial class UIInventoryItemPanel : QFramework.UIPanel
    {
        public int SelectNum = 1;

        protected override void RegisterUIEvent()
        {
            UITopStatus.BtnClose.OnClickAsObservable().Subscribe(_ =>
            {
                CloseSelf();
            });

            #region ItemPanel
            BtnSell.OnClickAsObservable().Subscribe(_ =>
            {
                if (mData.item.Capacity > 1)
                {
                    ItemPanel.Hide();
                    SellConfirmPanel.Hide();
                    SelectNumPanel.Show();
                }
                else
                {
                    ItemPanel.Hide();
                    SelectNumPanel.Hide();
                    SellConfirmPanel.Show();
                    TxtDesc.text = "确认售出道具，获得 " + mData.item.SellPrice.ToString() + " 金币吗？";
                }
            });
            #endregion

            #region SelectNumPanel
            BtnSelectCancel.OnClickAsObservable().Subscribe(_ =>
            {
                ItemPanel.Show();
                SelectNumPanel.Hide();
                SellConfirmPanel.Hide();
            });
            BtnLess.OnClickAsObservable().Subscribe(_ =>
            {
                if (SelectNum > 1)
                {
                    SelectNum = SelectNum - 1;
                }
                ShowSelectTxt();
            });
            BtnMore.OnClickAsObservable().Subscribe(_ =>
            {
                if (SelectNum < mData.Amount)
                {
                    SelectNum = SelectNum + 1;
                }
                ShowSelectTxt();
            });
            BtnMin.OnClickAsObservable().Subscribe(_ =>
            {
                SelectNum = 1;
                ShowSelectTxt();
            });
            BtnMax.OnClickAsObservable().Subscribe(_ =>
            {
                SelectNum = mData.Amount;
                ShowSelectTxt();
            });
            BtnSelectSell.OnClickAsObservable().Subscribe(_ =>
            {
                SellDone();
            });
            #endregion

            #region SellConfirmPanel
            BtnConfirmCancel.OnClickAsObservable().Subscribe(_ =>
            {
                ItemPanel.Show();
                SelectNumPanel.Hide();
                SellConfirmPanel.Hide();
            });
            BtnConfirmOK.OnClickAsObservable().Subscribe(_ =>
            {
                SellDone();
            });
            #endregion
        }

        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException ();
        }
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as UIInventoryItemPanelData ?? new UIInventoryItemPanelData();
            // please add init code here
            ImgItem.sprite = Resources.Load<Sprite>(mData.item.Sprite);
            ItemDesc.text = mData.item.GetToolTipText();
            if (mData.item.Type == ItemType.Consumable || mData.item.Type == ItemType.Material)
            {
                BtnUpgrade.Hide();
            }

            ShowSelectTxt();
        }

        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
        }

        private void ShowSelectTxt()
        {
            TxtNum.text = SelectNum.ToString() + " / " + mData.Amount.ToString();
            TxtNumDesc.text = "可获得 " + (mData.item.SellPrice * SelectNum).ToString();
        }

        private void SellDone()
        {
            mData.Solt.ReduceItem(SelectNum);
            // 显示已使用数量
            UIMgr.GetPanel<UIInventoryNewPanel>().ShowUsedTextCount();
            UIMgr.GetPanel<UIInventoryNewPanel>().SaveInventory();

            GameData.GoldCount = GameData.GoldCount + mData.item.SellPrice * SelectNum;

            UpdateTopStautsValue();

            CloseSelf();
        }

        /// <summary>
        /// 更新状态条上的数据
        /// </summary>
        public void UpdateTopStautsValue()
        {
            // 更新本页数据
            UITopStatus.ShowValueChaged();
            // 更新首页数据
            UIMgr.GetPanel<UIInventoryNewPanel>().UpdateTopStautsValue();
        }
    }
}
