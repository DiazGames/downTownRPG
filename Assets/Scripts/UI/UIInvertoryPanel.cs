// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace DiazDTRPG
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    using QFramework;
    using UniRx;
    
    public class UIInvertoryPanelData : QFramework.UIPanelData
    {
        /// <summary>
        /// 物品信息列表
        /// </summary>
        public List<Item> itemList
        {
            get
            {
                List<Item> newItemList = new List<Item>();
                string jsonContent = Resources.Load<TextAsset>("Json/Items").text;
                JSONObject json = new JSONObject(jsonContent);
                foreach (JSONObject temp in json.list)
                {

                    string typeStr = temp.GetField("type").str;
                    ItemType type = (ItemType)System.Enum.Parse(typeof(ItemType), typeStr);

                    int id = (int)temp.GetField("id").n;
                    string nameStr = temp.GetField("name").str;
                    ItemQuality quality = (ItemQuality)System.Enum.Parse(typeof(ItemQuality), temp.GetField("quality").str);
                    string description = temp.GetField("description").str;
                    int capacity = (int)temp.GetField("capacity").n;
                    int buyPrice = (int)temp.GetField("buyPrice").n;
                    int sellPrice = (int)temp.GetField("sellPrice").n;
                    string sprite = temp.GetField("sprite").str;
                    Debug.Log("=======1=======" + sprite);

                    Item item = null;
                    switch (type)
                    {
                        case ItemType.Consumable:
                            int hp = (int)temp.GetField("hp").n;
                            int mp = (int)temp.GetField("mp").n;
                            item = new Consumable(
                                id, nameStr, type, quality, description, capacity, buyPrice, sellPrice, sprite, hp, mp
                                );
                            break;
                        case ItemType.Equipment:
                            // TODO
                            break;
                        case ItemType.Material:
                            // TODO
                            break;
                        case ItemType.Weapon:
                            // TODO
                            break;
                    }

                    newItemList.Add(item);
                }
                return newItemList;
            }
        }

    }
    
    public partial class UIInvertoryPanel : QFramework.UIPanel, ISingleton
    {
        public static UIInvertoryPanel Instance
        {
            get
            {
                return MonoSingletonProperty<UIInvertoryPanel>.Instance;
            }
        }

        public void OnSingletonInit()
        {
        }

        protected override void RegisterUIEvent()
        {
            BtnClose.OnClickAsObservable().Subscribe(_ =>
            {
                CloseSelf();
            });

            BtnGemAdd.OnClickAsObservable().Subscribe(_ =>
            {
                UIMgr.OpenPanel<UIShopGemPanel>();
            });

            BtnGoldAdd.OnClickAsObservable().Subscribe(_ =>
            {
                UIMgr.OpenPanel<UIShopGoldPanel>();
            });
        }

        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException ();
        }
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as UIInvertoryPanelData ?? new UIInvertoryPanelData();
            // please add init code here
        }
        
        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
        }

        /// <summary>
        /// 根据 ID 获取 Item 对象
        /// </summary>
        /// <returns>The item by identifier.</returns>
        /// <param name="id">Identifier.</param>
        public Item GetItemByID(int id)
        {
            foreach (Item item in mData.itemList)
            {
                if (item.ID == id)
                {
                    return item;
                }
            }
            return null;
        }

        public void ShowToolTip(string content)
        {
            ToolTip.ShowToolTip(content);
        }

        public void HideToolTip()
        {
            ToolTip.HideToolTip();
        }

    }
}
